/*1) Определить иерархию и композицию классов (в соответствии с вариантом),
реализовать классы. Если необходимо расширьте по своему усмотрению
иерархию для выполнения всех пунктов л.р.
Каждый класс должен иметь отражающее смысл название и
информативный состав. При кодировании должны быть использованы
соглашения об оформлении кода code convention.
В одном из классов переопределите все методы, унаследованные от
Object.
2) В проекте должны быть интерфейсы и абстрактный класс(ы).
Использовать виртуальные методы и переопределение.
3) Сделайте один из классов герметизированным (бесплодным).
4) Добавьте в интерфейсы (интерфейс) и абстрактный класс одноименные
методы.
Дайте в наследуемом классе им разную реализацию и вызовите эти методы.
5) Написать демонстрационную программу, в которой создаются объекты
различных классов. Поработать с объектами через ссылки на абстрактные
классы и интерфейсы. В этом случае для идентификации типов объектов
использовать операторы is или as.
6) Во всех классах (иерархии) переопределить метод ToString(), который
выводит информацию о типе объекта и его текущих значениях.
7) Создайте дополнительный класс Printer c полиморфным методом
IAmPrinting( SomeAbstractClassorInterface someobj). Формальным
параметром метода должна быть ссылка на абстрактный класс или наиболее
общий интерфейс в вашей иерархии классов. В методе iIAmPrinting
определите тип объекта и вызовите ToString(). В демонстрационной
программе создайте массив, содержащий ссылки на разнотипные объекты
ваших классов по иерархии, а также объект класса Printer и последовательно
вызовите его метод IAmPrinting со всеми ссылками в качестве аргументов.*/
using System;
using System.Collections.Generic;
using System.Text;

namespace _5lab
{
    class Program
    {
        static void Main(string[] args)
        {
            List<IOperationSet> objects = new List<IOperationSet>();
            objects.Add(new Receipt());
            objects.Add(new Check());
            objects.Add(new Waybill());
            objects.Add(new Time());
            objects.Add(new Organization());

            Printer p = new Printer();
            foreach (IOperationSet op in objects)
                Console.WriteLine(p.IAmPrinting(op));

        }
    }
}
